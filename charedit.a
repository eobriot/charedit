; vim: syntax=acme
	type = 64

	* = $c000
	!to "charedit.prg", cbm
	
;;; kernal calls
	chrout 	= $ffd2
	plot	= $fff0
	getin	= $ffe4

	
;;;  Page 0 vars defined here so that acme doesn't complain
	wrk1	= $fb
	wrk2 	= $fc	      	;always good to have a page 0
	wrk3	= $fd

;;; some constants
	nbcol	= 7
	nbrow	= 7
	
main:

	jsr clrscr
   jsr cpychr
	jsr stpscrn
.loop:
	jsr crsor
	lda status
	cmp #$ff		;quitting?
	bne .loop
	jsr clrscr
	lda #0
	sta status		;quit cleanly
	sta cy
	sta cx
	sta dcy
	sta dcx
	rts

;;; routine to copy char rom 
cpychr	:
   pha
;;; turns interrupts off
	lda $dc0e
	and #254
	sta $dc0e
   sei
;;;switch out i/o
	lda $1
	and #251
	sta $1
;;;let's do the copy
	ldx #0
cpyl1:	
	lda $d000,x
	sta $3000,x
	lda $d100,x
	sta $3100,x
	lda $d200,x
	sta $3200,x
	lda $d300,x
	sta $3300,x
	lda $d400,x
	sta $3400,x
	lda $d500,x
	sta $3500,x
	lda $d600,x
	sta $3600,x
	lda $d700,x
	sta $3700,x
	lda $D800,x
	sta $3800,x
	lda $d900,x
	sta $3900,x
	lda $da00,x
	sta $3a00,x
	lda $db00,x
	sta $3b00,x
	lda $dc00,x
	sta $3c00,x
	lda $dd00,x
	sta $3d00,x
	lda $de00,x
	sta $3e00,x
	lda $df00,x
   sta $3f00,x
	dex
	bne cpyl1
;;;pfiou, copy is done
;;;switch on i/o
	lda $1
	ora #4
   sta $1
;;;turn interrupts on
	lda $dc0e
	ora #1
	sta $dc0e
   cli
	pla
	rts   

;;; routine to clear screen
clrscr:	lda #$93
	jsr chrout
	rts

wait:	jsr getin
	cmp #0
	beq wait
	rts
;;; print message
;;; wrk1 and wrk2 points to lower and upper byte of msg
;;; msg ends with 0
prtmsg:	
	ldy #0
-	lda (wrk1), y
	beq +
	jsr chrout
	iny
	jmp -
+
	rts
	
;;; Initial screen display
stpscrn:	
	ldx #0			;col number
	lda #32			;space
out:	sta 1024,x
	sta 1064,x
	sta 1104,x
	sta 1144,x
	sta 1184,x
	sta 1224,x
	sta 1264,x
	sta 1304,x
	inx
	cpx #nbcol
	bne out
	ldx #nbrow + 1		;vertical border
	lda #101
	sta 1024,x
	sta 1064,x
	sta 1104,x
	sta 1144,x
	sta 1184,x
	sta 1224,x
	sta 1264,x
	sta 1304,x
	ldx #0			;horizontal border
	lda #99
-	sta 1344,x
	inx
	cpx #nbcol + 1
	bne -
	ldx #10			;print a dummy message, should be an helpful one
	ldy #0
	clc
	jsr plot
	lda #<usage
	sta wrk1
	lda #>usage
	sta wrk2
	jsr prtmsg
	ldx #11
	ldy #0
	clc
	jsr plot
   lda #<usage2
	sta wrk1
	lda #>usage2
	sta wrk2
	jsr prtmsg
   ldx #12
	ldy #0
	clc
	jsr plot
   lda #<usage3
	sta wrk1
	lda #>usage3
	sta wrk2
	jsr prtmsg
	ldx #13
	ldy #0
	clc
	jsr plot
	lda #<usage4
	sta wrk1
	lda #>usage4
	sta wrk2
   jsr prtmsg
	ldx #13			;debug : show coordinates of cursor
	ldy #0
	jsr plot
	lda #<ccx		;cx
	sta wrk1
	lda #>ccx
	sta wrk2
;	jsr prtmsg
	ldy #6			;cy
	jsr plot
	lda #<ccy
	sta wrk1
	lda #>ccy
	sta wrk2
;	jsr prtmsg
	ldx #14			;dx
	ldy #0
	jsr plot
	lda #<cdx
	sta wrk1
	lda #>cdx
	sta wrk2
;	jsr prtmsg
	ldy #6			;dy
	jsr plot
	lda #<cdy
	sta wrk1
	lda #>cdy
	sta wrk2
;	jsr prtmsg
	rts
	
;;; routine to handle cursor movement and display
crsor:	
	lda cx
	sta dcx
	lda cy
	sta dcy			;save old cursor values
.wait:
	jsr getin
	cmp #0
	beq .wait		;no key?
	cmp #17			;upkey
	beq .down
	cmp #29			;right key
	beq .right
	cmp #145 		;down key
	beq .up
	cmp #157	   	;left key
	beq .left
	cmp #32			;space?
	beq .space
	cmp #81			;quit?
	beq .quit
	cmp #83
   beq .save      ;save
	jmp .wait
.up:
	lda cy
	cmp #0			;are we at row 0?
	beq +
	clc
	dec cy
+
	jmp .end
.right:
	lda cx
	cmp #nbcol		;are we at col 7?
	beq +
	clc
	inc cx
+
	jmp .end
.down:
	lda cy
	cmp #nbrow		;are we at row 7?
	beq +
	clc
	inc cy
+
	jmp .end
.left:
	lda cx
	cmp #0			;are we at col 0?
	beq +
	clc
	dec cx
+
	jmp .end
.space:	jsr mark
	jmp .end
.quit:
	lda #$ff
	sta status
   jmp .end
.save:
	jsr save
   jsr stpscrn
   jmp .end
.end:
	jsr dspcsr
;	jsr prtcrd
	rts

gtvalidchr:
.svwait:
	jsr getin
	cmp #48        ; a < 48 (asc 0)?
	bcc .svloop
	cmp #58        ; a < 58 (asc 9 + 1)?
	bcc .valid  
	cmp #71        ; a > 70 (asc F)?
	bcs .svloop
	cmp #65
	bcc .svloop    ; a < 65 (asc A)
   jmp .valid
.svloop:
	jmp .svwait
.valid:
   rts

save:
	ldx #24
	ldy #0
	clc
	jsr plot
	lda #<savemsg
	sta wrk1
	lda #>savemsg
	sta wrk2
   jsr prtmsg
;.svwait:
;	jsr getin
;	cmp #48        ; a < 48 (asc 0)?
;	bcc .svloop
;	cmp #58        ; a < 58 (asc 9 + 1)?
;	bcc .valid  
;	cmp #71        ; a > 70 (asc F)?
;	bcs .svloop
;	cmp #65
;	bcc .svloop    ; a < 65 (asc A)
;   jmp .valid
;.svloop:
;	jmp .svwait
;.valid:
   jsr gtvalidchr ; get first char of adress
   pha
	ldx #24
	ldy #33
	clc
	jsr plot
   pla
   jsr chrout     ; debug : print the valid char  
	jsr cvrtdgt
	asl            ; convert to high nibble
	asl
	asl
	asl
	sta wrk1
	jsr gtvalidchr ; get second char
	pha 
	ldx #24
	ldy #34
	clc 
	jsr plot
	pla
	jsr chrout
	jsr cvrtdgt
   ora wrk1       ; merge the two nibbles, now in A we have the char to replace
	pha            ; protectresult then blank last line
	ldx #24
	ldy #0
	clc
	jsr plot
   jsr blank
	ldx #24
	ldy #0
	clc
	jsr plot
	lda #<okmsg
	sta wrk1
	lda #>okmsg
	sta wrk2
	jsr prtmsg
   jsr wait       ; wait
	lda #24
	ldy #0
	clc
   jsr plot
   jsr blank
   pla            ; get back the result
dbg:
   rts

;;; blank the line at current cursor pos
blank:
   lda #<blankln
	sta wrk1
	lda #>blankln
	sta wrk2
	jsr prtmsg
	rts

;;; routine to convert a char to an integer
;;; char to convert is in a, returns integer in a
cvrtdgt:
	cmp #58
	bcc .digit
	cmp #71
	bcc .letter
	and #0
	jmp .endcvrt
.digit:
	sbc #47
	jmp .endcvrt
.letter:
	sbc #54
   jmp .endcvrt
.endcvrt:
   rts
;;; Routine to print a half byte in hexa mode
;;; Half byte is in a
;;; print to current cursor position
prtdgt:	cmp #10			;is the half byte <10?
	bmi .dec
	sbc #10			;no, we substract 10 and add it to 'A', then print
	adc #$40		;"A"
	jmp .exit
.dec:	adc #$30
.exit:
	jsr chrout
	rts

;;; This routine toggle a dot under the cursor

mark:
	;; fetch the data under the cursor
	lda cy			;fetch the row
	clc			;fucking carry.
	rol			;multiplty it by 2 forindex
	tax
	lda scrlines,x		;low byte
	sta wrk1
	inx
	lda scrlines,x		;high byte
	sta wrk2
	ldy cx			;fetch col
	lda (wrk1),y		;the data!
;;;  warning : as we are marking under the cursor, we have to AND $7F
	and #$7f
	cmp #32			;is it a space?
	beq .set
	lda #32			;no, so we toggle off
	jmp .ext
.set:	lda #81			;yes, we toggle on
.ext:
	sta (wrk1),y
	lda cy			;debug : convert value of current line
	jsr cvrt		; in wrk3 we have the value of the line in hexa
	ldx cy
	ldy #10
   clc         ; don't ever forget to clc before plotting if you want to move the cursor!
	jsr plot
	lda wrk3		;print high nibble
	ror
	ror
	ror
	ror
	and #15
	jsr prtdgt
	ldx cy
	ldy #11
	jsr plot
	lda wrk3
	and #15			;and now low nibble
	jsr prtdgt
	lda #0			;let's reset wrk3
	sta wrk3
	rts
	
;;;  clear the cursor position and
;;;  Display the cursor based on cx and cy
dspcsr:	
	;; first we clean
	lda dcy			;fetch the row
	rol			;multiplty it by 2 forindex
	tax
	lda scrlines,x		;low byte
	sta wrk1
	inx
	lda scrlines,x		;high byte
	sta wrk2
	ldy dcx			;fetch col
	lda (wrk1),y
	and #$7f		;reverse video
	sta (wrk1),y
	;;  now we put the new position
	lda cy			;fetch the row
	rol			;multiply by 2 for index in 16 bit table
	tax
	lda scrlines,x		;low byte
	sta wrk1
	inx
	lda scrlines,x		;high byte
	sta wrk2
	ldy cx			;fetch the row
	lda (wrk1), y		;fetch the value
	ora #$80
	sta (wrk1), y		;put the new value
	rts

	;; we print the coordinates
prtcrd:	
	ldx #13			;cx
	ldy #4
	jsr plot
	lda cx
	jsr prtdgt
	ldx #13
	ldy #9			;cy
	jsr plot
	lda cy
	jsr prtdgt
	ldx #14			;dx
	ldy #4
	jsr plot
	lda dcx
	jsr prtdgt
	ldx #14
	ldy #9			;dy
	jsr plot
	lda dcy
	jsr prtdgt
	rts
;;; This routine converts a row of dot to a 8 bits numbers
;;; in entry A holds the line of pattern to convert
cvrt:
	clc
	rol			;*2 for index to 16 bits table
	tax
	lda scrlines,x
	sta wrk1
	inx
	lda scrlines,x
	sta wrk2		;now in wrk we have the adress of screen line
	ldy #nbcol
;   iny
-	lda (wrk1),y		;first char
	and #$7f		;take care of eventual cursor at position
	clc
	cmp #$51			;is it on?
	bne .off
	lda wrk3		;it is on, use the mask to add value
	ora mask,y
	sta wrk3
	jmp +
.off
	lda wrk3		;should clear the value ...
	and mask2,y
	sta wrk3
+  dey
			;last col? (in fact first as we are going in reverse)
  ; bne -
	cpy #$ff
   bne -
	lda wrk3
	rts
	
;;; vars
chrptn	!byte $4,0,$ff,0,0,0,0,0
scrlines	!word 1024,1064,1104,1144,1184,1224,1264,1304,1024 ;begining of the 8 firsts screen lines. Last one is to avoid off by one:/
mask 		!byte 128,64,32,16,8,4,2,1		               		;bit mask for setting dot
mask2		!byte 127,191,223,239,247,251,253,254              ;bit mask to clear
row		!byte 0	                                    		;which row is being drawn
cx	   	!byte 0		                                    	; position of cursor in row/col
cy 		!byte 0
dcx		!byte 0                                   			;old values of cursor
dcy		!byte 0
usage	   !pet "it is a char editor",0
usage2	!pet "crsr to move, space to plot",0
usage3   !pet "q to quit",0
usage4	!pet "s to save char in memory",0
savemsg  !pet "enter char number in hex (00-ff)",0
okmsg    !pet "ok.",0
blankln	!fill 39, 32
         !by 0
ccx		!pet "cx ",0
ccy		!pet "cy ",0
cdx		!pet "dx ",0
cdy		!pet "dy ",0
status	!byte 0
