	type = 64

	* = $c000
	!to "charedit.prg", cbm
	
;;; kernal calls
	chrout 	=	$ffd2
	plot	=	$fff0
	getin	=	$ffe4

	
;;;  Page 0 vars defined here so that acme doesn't complain
	wrk1		= $fb
	wrk2 		= $fc	      ;always good to have a page 0
	
main	jsr clrscr
	jsr stpscrn
	;; 	jsr wait
.loop
	jsr crsor
	lda status
	cmp #$ff		;quitting?
	bne .loop
	jsr clrscr
	lda #0
	sta status		;quit cleanly
	sta cy
	sta cx
	sta dcy
	sta dcx
	rts

;;; routine to clear screen
clrscr 	lda #$93
	jsr chrout
	rts

wait	jsr getin
	cmp #0
	beq wait
	rts
;;; print message
;;; wrk1 and wrk2 points to lower and upper byte of msg
;;; msg ends with 0
prtmsg
	ldy #0
-	lda (wrk1), y
	beq +
	jsr chrout
	iny
	jmp -
+
	rts
	
;;; Initial screen display
stpscrn
	ldx #0			;col number
	lda #32			;space
out	sta 1024,x
	sta 1064,x
	sta 1104,x
	sta 1144,x
	sta 1184,x
	sta 1224,x
	sta 1264,x
	sta 1304,x
	inx
	cpx #8
	bne out
	ldx #9			;vertical border
	lda #101
	sta 1024,x
	sta 1064,x
	sta 1104,x
	sta 1144,x
	sta 1184,x
	sta 1224,x
	sta 1264,x
	sta 1304,x
	ldx #0			;horizontal border
	lda #99
-	sta 1344,x
	inx
	cpx #9
	bne -
	ldx #10			;print a dummy message, should be an helpful one
	ldy #0
	clc
	jsr plot
	lda #<usage
	sta wrk1
	lda #>usage
	sta wrk2
	jsr prtmsg
	rts
	
;;; routine to handle cursor movement and display
crsor
	lda cx
	sta dcx
	lda cy
	sta dcy			;save old cursor values
.wait
	jsr getin
	cmp #0
	beq .wait		;no key?
	cmp #17			;upkey
	beq .down
	cmp #29			;right key
	beq .right
	cmp #145		;down key
	beq .up
	cmp #157		;left key
	beq .left
	cmp #81			;quit?
	beq .quit
	jmp .wait
.up
	lda cy
	cmp #0			;are we at row 0?
	beq +
	dec cy
+
	jmp .end
.right
	lda cx
	cmp #8			;are we at col 7?
	beq +
	inc cx
+
	jmp .end
.down
	lda cy
	cmp #8			;are we at row 7?
	beq +
	inc cy
+
	jmp .end
.left
	lda cx
	cmp #0			;are we at col 0?
	beq +
	dec cx
+
	jmp .end
.quit
	lda #$ff
	sta status
.end
	jsr dspcsr
	rts

;;;  clear the cursor position and
;;;  Display the cursor based on cx and cy
dspcsr
	;; first we clean
	lda dcy			;fetch the row
	ror			;multiplty it by 2 forindex
	tax
	lda scrlines,x		;low byte
	sta wrk1
	inx
	lda scrlines,x		;high byte
	sta wrk2
	ldy cx			;fetch col
	lda (wrk1),y
	and #$7f		;reverse videao
	sta (wrk1),y
	;;  now we put the new position
	lda cy			;fetch the row
	ror			;multiplty by 2 for index in 16 bit table
	tax
	lda scrlines,x		;low byte
	sta wrk1
	inx
	lda scrlines,x		;high byte
	sta wrk2
	ldy cx			;fetch the row
	lda (wrk1), y		;fetch the value
	ora #$80
	sta (wrk1), y		;put the new value
	rts
;;; vars
chrptn		!byte $4,0,$ff,0,0,0,0,0
scrlines 	!word 1024,1064,1104,1144,1184,1224,1264,1304 ;begining of the 8 firsts screen lines
row		!byte 0			;which row is being drawn
cx		!byte 0			; position of cursor in row/col
cy 		!byte 0
dcx		!byte 0			;old values of cursor
dcy		!byte 0
usage		!pet "it is a char editor"
		!byte 0
status		!byte 0